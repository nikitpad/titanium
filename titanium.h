#ifndef __TITANIUM_CRYPT_H__
#define __TITANIUM_CRYPT_H__
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

const static uint8_t sbox[] =
{
	0x74, 0xff, 0x14, 0x86, 0x85, 0x42, 0x57, 0x68, 
	0x3f, 0x10, 0x48, 0x66, 0x02, 0x70, 0xe1, 0x96,
	0x5f, 0xb5, 0x3d, 0x8c, 0x05, 0x6b, 0xeb, 0x5e,
	0xfe, 0x44, 0xc7, 0x91, 0x7b, 0x7c, 0x67, 0x87, 
	0x01, 0x26, 0x9c, 0x77, 0x25, 0x40, 0x8b, 0xa7, 
	0x23, 0x38, 0xf0, 0x65, 0x63, 0x81, 0xdc, 0xc5, 
	0xac, 0x71, 0x6d, 0xbe, 0xe2, 0xc0, 0x17, 0xfd,
	0x9e, 0x3b, 0xf6, 0xb8, 0x28, 0x7f, 0x1c, 0xd7, 
	0x0c, 0x43, 0xb0, 0xf1, 0xd9, 0xbf, 0x3a, 0xf4, 
	0xbd, 0x41, 0x45, 0xfa, 0x4a, 0x56, 0x7d, 0x88, 
	0x1b, 0x0b, 0x54, 0xbb, 0x47, 0xc1, 0x2f, 0xdf, 
	0x22, 0x09, 0xe7, 0xa9, 0x08, 0xd2, 0x0a, 0x4f, 
	0x79, 0xde, 0x12, 0x90, 0x03, 0xb2, 0xea, 0x21, 
	0x50, 0xd6, 0x3c, 0xb9, 0x18, 0xd5, 0xec, 0x06, 
	0xcf, 0x52, 0x35, 0xe0, 0xfb, 0x84, 0xa5, 0x72,
	0x61, 0xb6, 0x2d, 0x80, 0xc9, 0x51, 0xb1, 0xda,
	0xf5, 0xe5, 0xa0, 0x37, 0xd0, 0xef, 0x3e, 0x46,
	0x6f, 0x1a, 0x99, 0xc3, 0x5c, 0x60, 0x64, 0x7e,
	0xfc, 0xa6, 0x9f, 0x0e, 0xc8, 0x9b, 0xe3, 0x97,
	0xa1, 0xcb, 0x83, 0xb7, 0x31, 0x4d, 0x27, 0xd3,
	0x49, 0x8e, 0x34, 0x36, 0xc2, 0x8d, 0xae, 0x2e,
	0xf8, 0xc4, 0x6c, 0xab, 0x75, 0x29, 0xed, 0x62,
	0xe8, 0xa2, 0x4e, 0x94, 0x4b, 0x1e, 0xf9, 0x8f,
	0xd1, 0xaa, 0xcd, 0xd4, 0x16, 0x59, 0x13, 0xaf,
	0xba, 0x8a, 0xe4, 0x00, 0x82, 0x7a, 0x2c, 0x9d,
	0x19, 0x20, 0x9a, 0x2a, 0x39, 0xdd, 0xa4, 0x6a,
	0x6e, 0x53, 0xf7, 0x1d, 0x0f, 0xc6, 0x93, 0x1f,
	0xee, 0xf3, 0x89, 0x11, 0xcc, 0xca, 0x55, 0x4c,
	0xd8, 0xbc, 0xce, 0x5b, 0xe6, 0xb3, 0xa8, 0xdb,
	0x32, 0x04, 0x5d, 0x07, 0xb4, 0x69, 0x95, 0xad,
	0x30, 0x76, 0x33, 0x58, 0x78, 0xf2, 0x0d, 0x73,
	0x15, 0x2b, 0xe9, 0x98, 0x5a, 0x24, 0xa3, 0x92, 
};

const static uint8_t rsbox[] =
{
	0xc3, 0x20, 0x0c, 0x64, 0xe9, 0x14, 0x6f, 0xeb, 
	0x5c, 0x59, 0x5e, 0x51, 0x40, 0xf6, 0x93, 0xd4,
	0x09, 0xdb, 0x62, 0xbe, 0x02, 0xf8, 0xbc, 0x36,
	0x6c, 0xc8, 0x89, 0x50, 0x3e, 0xd3, 0xb5, 0xd7,
	0xc9, 0x67, 0x58, 0x28, 0xfd, 0x24, 0x21, 0x9e,
	0x3c, 0xad, 0xcb, 0xf9, 0xc6, 0x7a, 0xa7, 0x56,
	0xf0, 0x9c, 0xe8, 0xf2, 0xa2, 0x72, 0xa3, 0x83,
	0x29, 0xcc, 0x46, 0x39, 0x6a, 0x12, 0x86, 0x08,
	0x25, 0x49, 0x05, 0x41, 0x19, 0x4a, 0x87, 0x54,
	0x0a, 0xa0, 0x4c, 0xb4, 0xdf, 0x9d, 0xb2, 0x5f,
	0x68, 0x7d, 0x71, 0xd1, 0x52, 0xde, 0x4d, 0x06,
	0xf3, 0xbd, 0xfc, 0xe3, 0x8c, 0xea, 0x17, 0x10,
	0x8d, 0x78, 0xaf, 0x2c, 0x8e, 0x2b, 0x0b, 0x1e,
	0x07, 0xed, 0xcf, 0x15, 0xaa, 0x32, 0xd0, 0x88,
	0x0d, 0x31, 0x77, 0xf7, 0x00, 0xac, 0xf1, 0x23,
	0xf4, 0x60, 0xc5, 0x1c, 0x1d, 0x4e, 0x8f, 0x3d,
	0x7b, 0x2d, 0xc4, 0x9a, 0x75, 0x04, 0x03, 0x1f,
	0x4f, 0xda, 0xc1, 0x26, 0x13, 0xa5, 0xa1, 0xb7,
	0x63, 0x1b, 0xff, 0xd6, 0xb3, 0xee, 0x0f, 0x97,
	0xfb, 0x8a, 0xca, 0x95, 0x22, 0xc7, 0x38, 0x92,
	0x82, 0x98, 0xb1, 0xfe, 0xce, 0x76, 0x91, 0x27,
	0xe6, 0x5b, 0xb9, 0xab, 0x30, 0xef, 0xa6, 0xbf,
	0x42, 0x7e, 0x65, 0xe5, 0xec, 0x11, 0x79, 0x9b,
	0x3b, 0x6b, 0xc0, 0x53, 0xe1, 0x48, 0x33, 0x45,
	0x35, 0x55, 0xa4, 0x8b, 0xa9, 0x2f, 0xd5, 0x1a,
	0x94, 0x7c, 0xdd, 0x99, 0xdc, 0xba, 0xe2, 0x70,
	0x84, 0xb8, 0x5d, 0x9f, 0xbb, 0x6d, 0x69, 0x3f,
	0xe0, 0x44, 0x7f, 0xe7, 0x2e, 0xcd, 0x61, 0x57,
	0x73, 0x0e, 0x34, 0x96, 0xc2, 0x81, 0xe4, 0x5a,
	0xb0, 0xfa, 0x66, 0x16, 0x6e, 0xae, 0xd8, 0x85,
	0x2a, 0x43, 0xf5, 0xd9, 0x47, 0x80, 0x3a, 0xd2,
	0xa8, 0xb6, 0x4b, 0x74, 0x90, 0x37, 0x18, 0x01, 
};

const static uint8_t pboxes[] = {
	6, 12, 8, 7, 15, 22, 14, 25,
	21, 1, 4, 10, 18, 16, 27, 13,
	26, 5, 20, 23, 11, 17, 0, 24,
	9, 2, 31, 19, 28, 30, 3, 29,
	22, 1, 24, 7, 0, 16, 10, 2, 
	18, 3, 21, 15, 14, 9, 6, 23, 
	25, 4, 27, 31, 19, 20, 12, 28, 
	29, 8, 11, 13, 30, 26, 17, 5,
	2, 13, 31, 0, 11, 17, 22, 20, 
	29, 6, 23, 21, 15, 14, 12, 30, 
	16, 3, 19, 27, 1, 24, 25, 26,
	4, 18, 5, 8, 7, 28, 9, 10,
	10, 22, 7, 0, 24, 2, 1, 20,
	30, 25, 9, 21, 14, 15, 12, 18, 
	16, 8, 26, 17, 29, 19, 11, 27,
	23, 31, 28, 4, 3, 13, 5, 6,
	19, 23, 31, 29, 6, 14, 3, 28,
	24, 13, 15, 21, 16, 26, 5, 7,
	1, 4, 2, 20, 10, 17, 22, 8, 
	11, 18, 0, 12, 30, 27, 25, 9,
	15, 2, 16, 3, 29, 24, 11, 13, 
	28, 30, 20, 8, 6, 23, 7, 21, 
	14, 18, 27, 19, 9, 12, 10, 22, 
	1, 26, 4, 5, 25, 17, 0, 31,
	29, 21, 2, 18, 6, 23, 31, 8,
	25, 5, 15, 24, 26, 27, 11, 30,
	0, 19, 14, 22, 10, 16, 7, 4, 
	28, 3, 13, 12, 1, 20, 9, 17,
	5, 25, 8, 9, 14, 12, 15, 20,
	24, 3, 18, 2, 30, 27, 26, 11,
	16, 17, 4, 28, 29, 7, 1, 21, 
	19, 0, 22, 13, 23, 31, 6, 27,
	3, 5, 20, 9, 13, 12, 28, 7,
	0, 2, 19, 15, 1, 10, 24, 21,
	22, 14, 6, 25, 8, 26, 29, 11, 
	23, 31, 18, 16, 17, 30, 4, 25, 
	28, 10, 27, 22, 8, 6, 3, 17, 
	15, 11, 26, 19, 18, 30, 29, 7, 
	24, 0, 31, 16, 2, 14, 21, 5, 
	1, 4, 9, 13, 12, 20, 23, 10, 
	26, 7, 8, 6, 9, 23, 31, 30, 
	12, 22, 16, 20, 14, 1, 11, 5, 
	25, 28, 24, 27, 21, 13, 0, 2, 
	4, 3, 18, 19, 17, 29, 15, 20, 
	27, 4, 7, 28, 10, 22, 6, 18, 
	11, 3, 30, 19, 17, 25, 9, 5, 
	29, 15, 24, 8, 23, 31, 26, 16,
	21, 13, 2, 14, 0, 12, 1, 13, 
	12, 17, 6, 29, 16, 22, 2, 20, 
	9, 7, 8, 14, 5, 28, 25, 26, 
	18, 10, 1, 27, 30, 31, 23, 19, 
	4, 24, 21, 3, 0, 11, 15, 28, 
	25, 23, 27, 24, 20, 31, 17, 7,
	8, 15, 4, 10, 11, 0, 19, 30, 
	3, 9, 1, 16, 13, 14, 6, 18, 
	12, 5, 29, 21, 2, 22, 26, 10
};

#define rol(a, b) (((a) << (b)) | ((a) >> (sizeof(a) * 8 - (b))))
#define ror(a, b) (((a) >> (b)) | ((a) << (sizeof(a) * 8 - (b))))

#define BLOCK_SIZE 32
#define KEY_SIZE 32
#define ROUNDS 16

void key_schedule(uint8_t const *key, uint8_t *next_key)
{
	#define _mix_bytes(a, b, c, d) \
		b ^= rol((uint8_t)(c + d), 3), \
		c ^= ror((uint8_t)(d + a), 5), \
		d ^= rol((uint8_t)(c + b), 7), \
		a ^= ror((uint8_t)(b + c), 1);
	#define mix_bytes(a, b, c, d) \
		_mix_bytes(next_key[a], next_key[b], next_key[c], next_key[d])
	#define _mix_words(a, b, c, d) \
		c ^= ror(a + b, 21), \
		d ^= ror(c + d, 17), \
		a ^= ror(b + c, 12), \
		b ^= ror(d + a, 9 );
	#define mix_words(a, b, c, d) \
		_mix_words(dst[a], dst[b], dst[c], dst[d])
	uint32_t const *src = (uint32_t const*)key;
	uint32_t *dst = (uint32_t*)next_key;
	for (int i = 0; 32 > i; i++) next_key[i] = key[i];
	mix_bytes(7, 30, 18, 27) mix_bytes(5, 11, 4, 13)
	mix_bytes(24, 6, 31, 0)  mix_bytes(19, 16, 21, 25)
	mix_bytes(3, 8, 17, 9)   mix_bytes(28, 23, 14, 29)
	mix_bytes(10, 2, 20, 26) mix_bytes(12, 1, 22, 15)
	mix_words(0, 3, 2, 7) mix_words(1, 4, 6, 5)
	mix_words(1, 4, 3, 0) mix_words(2, 5, 7, 6)
#if defined(__BYTE_ORDER) && __BYTE_ORDER == __BIG_ENDIAN || \
    defined(__BIG_ENDIAN__) || \
    defined(__ARMEB__) || \
    defined(__THUMBEB__) || \
    defined(__AARCH64EB__) || \
    defined(_MIBSEB) || defined(__MIBSEB) || defined(__MIBSEB__)
	// Perform 32-bit byteswap on big-endian architectures
	for (int i = 0; 32 > i; i++)
		dst[i] = dst[i] >> 24 & 0x000000FF |
                 dst[i] << 8  & 0x00FF0000 |
                 dst[i] >> 8  & 0x0000FF00 |
                 dst[i] << 24 & 0xFF000000;
#endif
}

void xor_key(uint8_t *block, uint8_t const *key)
{
	for (int i = 0; BLOCK_SIZE > i; i++)
		block[i] ^= key[i];
}

#define is_set(n)  (    block[31 - n / 8] &  1 << n%8)
#define set_bit(n) (new_block[31 - n / 8] |= 1 << n%8)

void shuffle(uint8_t *block, uint8_t const *box)
{
	uint8_t new_block[BLOCK_SIZE];
	for (int i = 0; BLOCK_SIZE > i; i++)
		new_block[box[i]] = block[i];
	memcpy(block, new_block, BLOCK_SIZE);
}

void inv_shuffle(uint8_t *block, uint8_t const *box)
{
	uint8_t new_block[BLOCK_SIZE];
	for (int i = 0; BLOCK_SIZE > i; i++)
		new_block[i] = block[box[i]];
	memcpy(block, new_block, BLOCK_SIZE);
}

#undef set_bit
#undef is_set

void sub_block(uint8_t *block)
{
	for (int i = 0; BLOCK_SIZE > i; i++)
		block[i] = sbox[block[i]];
}

void inv_sub_block(uint8_t *block)
{
	for (int i = 0; BLOCK_SIZE > i; i++)
		block[i] = rsbox[block[i]];
}

void titanium_block(uint8_t *block, uint8_t const *key)
{
	uint8_t round_keys[ROUNDS][KEY_SIZE];
	memcpy(round_keys[0], key, KEY_SIZE);
	for (int i = 1; ROUNDS > i; i++)
		key_schedule(round_keys[i - 1], round_keys[i]);
	xor_key(block, round_keys[0]);
	for (int i = 1; ROUNDS - 1 > i; i++)
	{
		xor_key(block, round_keys[i]);
		sub_block(block);
		shuffle(block, &pboxes[(i - 1) * 32]);
	}
	xor_key(block, round_keys[ROUNDS - 1]);
}

void titanium_inv_block(uint8_t *block, uint8_t const *key)
{
	uint8_t round_keys[ROUNDS][KEY_SIZE];
	memcpy(round_keys[0], key, KEY_SIZE);
	for (int i = 1; ROUNDS > i; i++)
		key_schedule(round_keys[i - 1], round_keys[i]);
	xor_key(block, round_keys[ROUNDS - 1]);
	for (int i = ROUNDS - 2; 1 <= i; i--)
	{
		inv_shuffle(block, &pboxes[(i - 1) * 32]);
		inv_sub_block(block);
		xor_key(block, round_keys[i]);
	}
	xor_key(block, round_keys[0]);
}

void titanium_cbc(
	uint8_t const *src, 
	int len,
	uint8_t *dest, 
	uint8_t const *key, 
	uint8_t const *iv)
{
	memcpy(dest, src, len);
	uint8_t *end = dest + len;
	uint8_t ciphertext[BLOCK_SIZE];
	if (iv)
		memcpy(ciphertext, iv, BLOCK_SIZE);
	else
		memset(ciphertext, 0, BLOCK_SIZE);
	while (end > dest)
	{
		xor_key(dest, ciphertext);
		titanium_block(dest, key);
		memcpy(ciphertext, dest, BLOCK_SIZE);
		dest += BLOCK_SIZE;
	}
}

void titanium_inv_cbc(
	uint8_t const *src, 
	int len, 
	uint8_t *dest,
	uint8_t const *key,
	uint8_t const *iv)
{
	memcpy(dest, src, len);
	uint8_t *end = dest + len;
	uint8_t ciphertext1[BLOCK_SIZE], ciphertext2[BLOCK_SIZE];
	if (iv)
		memcpy(ciphertext2, iv, BLOCK_SIZE);
	else
		memset(ciphertext2, 0, BLOCK_SIZE);
	while (end > dest)
	{
		memcpy(ciphertext1, dest, BLOCK_SIZE);
		titanium_inv_block(dest, key);
		xor_key(dest, ciphertext2);
		memcpy(ciphertext2, ciphertext1, BLOCK_SIZE);
		dest += BLOCK_SIZE;
	}
}

uint8_t *titanium_out_buffer(int len)
{
	if (!len || len & BLOCK_SIZE - 1) len &= ~(BLOCK_SIZE - 1), len += BLOCK_SIZE;
	return malloc(len);
}
#endif